# coding: utf-8

"""
    Asana

    This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr, field_validator
from pydantic import Field
from asana_asyncio.models.team_response_all_of_organization import TeamResponseAllOfOrganization
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class TeamResponse(BaseModel):
    """
    TeamResponse
    """ # noqa: E501
    gid: Optional[StrictStr] = Field(default=None, description="Globally unique identifier of the resource, as a string.")
    resource_type: Optional[StrictStr] = Field(default=None, description="The base type of this resource.")
    name: Optional[StrictStr] = Field(default=None, description="The name of the team.")
    description: Optional[StrictStr] = Field(default=None, description="[Opt In](/docs/inputoutput-options). The description of the team. ")
    html_description: Optional[StrictStr] = Field(default=None, description="[Opt In](/docs/inputoutput-options). The description of the team with formatting as HTML. ")
    organization: Optional[TeamResponseAllOfOrganization] = None
    permalink_url: Optional[StrictStr] = Field(default=None, description="A url that points directly to the object within Asana.")
    visibility: Optional[StrictStr] = Field(default=None, description="The visibility of the team to users in the same organization ")
    edit_team_name_or_description_access_level: Optional[StrictStr] = Field(default=None, description="Controls who can edit team name and description ")
    edit_team_visibility_or_trash_team_access_level: Optional[StrictStr] = Field(default=None, description="Controls who can edit team visibility and trash teams ")
    member_invite_management_access_level: Optional[StrictStr] = Field(default=None, description="Controls who can accept or deny member invites for a given team ")
    guest_invite_management_access_level: Optional[StrictStr] = Field(default=None, description="Controls who can accept or deny guest invites for a given team ")
    join_request_management_access_level: Optional[StrictStr] = Field(default=None, description="Controls who can accept or deny join team requests for a Membership by Request team ")
    team_member_removal_access_level: Optional[StrictStr] = Field(default=None, description="Controls who can remove team members ")
    __properties: ClassVar[List[str]] = ["gid", "resource_type", "name", "description", "html_description", "organization", "permalink_url", "visibility", "edit_team_name_or_description_access_level", "edit_team_visibility_or_trash_team_access_level", "member_invite_management_access_level", "guest_invite_management_access_level", "join_request_management_access_level", "team_member_removal_access_level"]

    @field_validator('visibility')
    def visibility_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('secret', 'request_to_join', 'public'):
            raise ValueError("must be one of enum values ('secret', 'request_to_join', 'public')")
        return value

    @field_validator('edit_team_name_or_description_access_level')
    def edit_team_name_or_description_access_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('all_team_members', 'only_team_admins'):
            raise ValueError("must be one of enum values ('all_team_members', 'only_team_admins')")
        return value

    @field_validator('edit_team_visibility_or_trash_team_access_level')
    def edit_team_visibility_or_trash_team_access_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('all_team_members', 'only_team_admins'):
            raise ValueError("must be one of enum values ('all_team_members', 'only_team_admins')")
        return value

    @field_validator('member_invite_management_access_level')
    def member_invite_management_access_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('all_team_members', 'only_team_admins'):
            raise ValueError("must be one of enum values ('all_team_members', 'only_team_admins')")
        return value

    @field_validator('guest_invite_management_access_level')
    def guest_invite_management_access_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('all_team_members', 'only_team_admins'):
            raise ValueError("must be one of enum values ('all_team_members', 'only_team_admins')")
        return value

    @field_validator('join_request_management_access_level')
    def join_request_management_access_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('all_team_members', 'only_team_admins'):
            raise ValueError("must be one of enum values ('all_team_members', 'only_team_admins')")
        return value

    @field_validator('team_member_removal_access_level')
    def team_member_removal_access_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('all_team_members', 'only_team_admins'):
            raise ValueError("must be one of enum values ('all_team_members', 'only_team_admins')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of TeamResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "gid",
                "resource_type",
                "permalink_url",
                "edit_team_name_or_description_access_level",
                "edit_team_visibility_or_trash_team_access_level",
                "member_invite_management_access_level",
                "guest_invite_management_access_level",
                "join_request_management_access_level",
                "team_member_removal_access_level",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of organization
        if self.organization:
            _dict['organization'] = self.organization.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of TeamResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "gid": obj.get("gid"),
            "resource_type": obj.get("resource_type"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "html_description": obj.get("html_description"),
            "organization": TeamResponseAllOfOrganization.from_dict(obj.get("organization")) if obj.get("organization") is not None else None,
            "permalink_url": obj.get("permalink_url"),
            "visibility": obj.get("visibility"),
            "edit_team_name_or_description_access_level": obj.get("edit_team_name_or_description_access_level"),
            "edit_team_visibility_or_trash_team_access_level": obj.get("edit_team_visibility_or_trash_team_access_level"),
            "member_invite_management_access_level": obj.get("member_invite_management_access_level"),
            "guest_invite_management_access_level": obj.get("guest_invite_management_access_level"),
            "join_request_management_access_level": obj.get("join_request_management_access_level"),
            "team_member_removal_access_level": obj.get("team_member_removal_access_level")
        })
        return _obj


