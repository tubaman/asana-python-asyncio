# coding: utf-8

"""
    Asana

    This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from asana_asyncio.models.custom_field_compact_date_value import CustomFieldCompactDateValue
from asana_asyncio.models.custom_field_compact_enum_value import CustomFieldCompactEnumValue
from asana_asyncio.models.enum_option import EnumOption
from typing import Optional, Set
from typing_extensions import Self

class CustomFieldCompact(BaseModel):
    """
    Custom Fields store the metadata that is used in order to add user-specified information to tasks in Asana. Be sure to reference the [custom fields](/reference/custom-fields) developer documentation for more information about how custom fields relate to various resources in Asana.  Users in Asana can [lock custom fields](https://asana.com/guide/help/premium/custom-fields#gl-lock-fields), which will make them read-only when accessed by other users. Attempting to edit a locked custom field will return HTTP error code `403 Forbidden`.
    """ # noqa: E501
    gid: Optional[StrictStr] = Field(default=None, description="Globally unique identifier of the resource, as a string.")
    resource_type: Optional[StrictStr] = Field(default=None, description="The base type of this resource.")
    name: Optional[StrictStr] = Field(default=None, description="The name of the custom field.")
    type: Optional[StrictStr] = Field(default=None, description="*Deprecated: new integrations should prefer the resource_subtype field.* The type of the custom field. Must be one of the given values. ")
    enum_options: Optional[List[EnumOption]] = Field(default=None, description="*Conditional*. Only relevant for custom fields of type `enum` or `multi_enum`. This array specifies the possible values which an `enum` custom field can adopt. To modify the enum options, refer to [working with enum options](/reference/createenumoptionforcustomfield).")
    enabled: Optional[StrictBool] = Field(default=None, description="*Conditional*. Determines if the custom field is enabled or not.")
    representation_type: Optional[StrictStr] = Field(default=None, description="This field tells the type of the custom field.")
    id_prefix: Optional[StrictStr] = Field(default=None, description="This field is the unique custom ID string for the custom field.")
    is_formula_field: Optional[StrictBool] = Field(default=None, description="*Conditional*. This flag describes whether a custom field is a formula custom field.")
    date_value: Optional[CustomFieldCompactDateValue] = None
    enum_value: Optional[CustomFieldCompactEnumValue] = None
    multi_enum_values: Optional[List[EnumOption]] = Field(default=None, description="*Conditional*. Only relevant for custom fields of type `multi_enum`. This object is the chosen values of a `multi_enum` custom field.")
    number_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="*Conditional*. This number is the value of a `number` custom field.")
    text_value: Optional[StrictStr] = Field(default=None, description="*Conditional*. This string is the value of a `text` custom field.")
    display_value: Optional[StrictStr] = Field(default=None, description="A string representation for the value of the custom field. Integrations that don't require the underlying type should use this field to read values. Using this field will future-proof an app against new custom field types.")
    __properties: ClassVar[List[str]] = ["gid", "resource_type", "name", "type", "enum_options", "enabled", "representation_type", "id_prefix", "is_formula_field", "date_value", "enum_value", "multi_enum_values", "number_value", "text_value", "display_value"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['text', 'enum', 'multi_enum', 'number', 'date', 'people']):
            raise ValueError("must be one of enum values ('text', 'enum', 'multi_enum', 'number', 'date', 'people')")
        return value

    @field_validator('representation_type')
    def representation_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['text', 'enum', 'multi_enum', 'number', 'date', 'people', 'formula', 'custom_id']):
            raise ValueError("must be one of enum values ('text', 'enum', 'multi_enum', 'number', 'date', 'people', 'formula', 'custom_id')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CustomFieldCompact from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "gid",
            "resource_type",
            "type",
            "enabled",
            "representation_type",
            "display_value",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in enum_options (list)
        _items = []
        if self.enum_options:
            for _item_enum_options in self.enum_options:
                if _item_enum_options:
                    _items.append(_item_enum_options.to_dict())
            _dict['enum_options'] = _items
        # override the default output from pydantic by calling `to_dict()` of date_value
        if self.date_value:
            _dict['date_value'] = self.date_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of enum_value
        if self.enum_value:
            _dict['enum_value'] = self.enum_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in multi_enum_values (list)
        _items = []
        if self.multi_enum_values:
            for _item_multi_enum_values in self.multi_enum_values:
                if _item_multi_enum_values:
                    _items.append(_item_multi_enum_values.to_dict())
            _dict['multi_enum_values'] = _items
        # set to None if id_prefix (nullable) is None
        # and model_fields_set contains the field
        if self.id_prefix is None and "id_prefix" in self.model_fields_set:
            _dict['id_prefix'] = None

        # set to None if date_value (nullable) is None
        # and model_fields_set contains the field
        if self.date_value is None and "date_value" in self.model_fields_set:
            _dict['date_value'] = None

        # set to None if number_value (nullable) is None
        # and model_fields_set contains the field
        if self.number_value is None and "number_value" in self.model_fields_set:
            _dict['number_value'] = None

        # set to None if text_value (nullable) is None
        # and model_fields_set contains the field
        if self.text_value is None and "text_value" in self.model_fields_set:
            _dict['text_value'] = None

        # set to None if display_value (nullable) is None
        # and model_fields_set contains the field
        if self.display_value is None and "display_value" in self.model_fields_set:
            _dict['display_value'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CustomFieldCompact from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "gid": obj.get("gid"),
            "resource_type": obj.get("resource_type"),
            "name": obj.get("name"),
            "type": obj.get("type"),
            "enum_options": [EnumOption.from_dict(_item) for _item in obj["enum_options"]] if obj.get("enum_options") is not None else None,
            "enabled": obj.get("enabled"),
            "representation_type": obj.get("representation_type"),
            "id_prefix": obj.get("id_prefix"),
            "is_formula_field": obj.get("is_formula_field"),
            "date_value": CustomFieldCompactDateValue.from_dict(obj["date_value"]) if obj.get("date_value") is not None else None,
            "enum_value": CustomFieldCompactEnumValue.from_dict(obj["enum_value"]) if obj.get("enum_value") is not None else None,
            "multi_enum_values": [EnumOption.from_dict(_item) for _item in obj["multi_enum_values"]] if obj.get("multi_enum_values") is not None else None,
            "number_value": obj.get("number_value"),
            "text_value": obj.get("text_value"),
            "display_value": obj.get("display_value")
        })
        return _obj


