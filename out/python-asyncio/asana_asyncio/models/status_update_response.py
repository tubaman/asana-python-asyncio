# coding: utf-8

"""
    Asana

    This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from asana_asyncio.models.like import Like
from asana_asyncio.models.status_update_response_all_of_parent import StatusUpdateResponseAllOfParent
from asana_asyncio.models.user_compact import UserCompact
from typing import Optional, Set
from typing_extensions import Self

class StatusUpdateResponse(BaseModel):
    """
    StatusUpdateResponse
    """ # noqa: E501
    gid: Optional[StrictStr] = Field(default=None, description="Globally unique identifier of the resource, as a string.")
    resource_type: Optional[StrictStr] = Field(default=None, description="The base type of this resource.")
    title: Optional[StrictStr] = Field(default=None, description="The title of the status update.")
    resource_subtype: Optional[StrictStr] = Field(default=None, description="The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning. The `resource_subtype`s for `status` objects represent the type of their parent.")
    text: StrictStr = Field(description="The text content of the status update.")
    html_text: Optional[StrictStr] = Field(default=None, description="[Opt In](/docs/inputoutput-options). The text content of the status update with formatting as HTML.")
    status_type: StrictStr = Field(description="The type associated with the status update. This represents the current state of the object this object is on.")
    author: Optional[UserCompact] = None
    created_at: Optional[datetime] = Field(default=None, description="The time at which this resource was created.")
    created_by: Optional[UserCompact] = None
    hearted: Optional[StrictBool] = Field(default=None, description="*Deprecated - please use liked instead* True if the status is hearted by the authorized user, false if not.")
    hearts: Optional[List[Like]] = Field(default=None, description="*Deprecated - please use likes instead* Array of likes for users who have hearted this status.")
    liked: Optional[StrictBool] = Field(default=None, description="True if the status is liked by the authorized user, false if not.")
    likes: Optional[List[Like]] = Field(default=None, description="Array of likes for users who have liked this status.")
    modified_at: Optional[datetime] = Field(default=None, description="The time at which this project status was last modified. *Note: This does not currently reflect any changes in associations such as comments that may have been added or removed from the status.*")
    num_hearts: Optional[StrictInt] = Field(default=None, description="*Deprecated - please use likes instead* The number of users who have hearted this status.")
    num_likes: Optional[StrictInt] = Field(default=None, description="The number of users who have liked this status.")
    parent: Optional[StatusUpdateResponseAllOfParent] = None
    __properties: ClassVar[List[str]] = ["gid", "resource_type", "title", "resource_subtype", "text", "html_text", "status_type", "author", "created_at", "created_by", "hearted", "hearts", "liked", "likes", "modified_at", "num_hearts", "num_likes", "parent"]

    @field_validator('resource_subtype')
    def resource_subtype_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['project_status_update', 'portfolio_status_update', 'goal_status_update']):
            raise ValueError("must be one of enum values ('project_status_update', 'portfolio_status_update', 'goal_status_update')")
        return value

    @field_validator('status_type')
    def status_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['on_track', 'at_risk', 'off_track', 'on_hold', 'complete', 'achieved', 'partial', 'missed', 'dropped']):
            raise ValueError("must be one of enum values ('on_track', 'at_risk', 'off_track', 'on_hold', 'complete', 'achieved', 'partial', 'missed', 'dropped')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StatusUpdateResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "gid",
            "resource_type",
            "resource_subtype",
            "created_at",
            "hearted",
            "hearts",
            "likes",
            "modified_at",
            "num_hearts",
            "num_likes",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of author
        if self.author:
            _dict['author'] = self.author.to_dict()
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['created_by'] = self.created_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in hearts (list)
        _items = []
        if self.hearts:
            for _item_hearts in self.hearts:
                if _item_hearts:
                    _items.append(_item_hearts.to_dict())
            _dict['hearts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in likes (list)
        _items = []
        if self.likes:
            for _item_likes in self.likes:
                if _item_likes:
                    _items.append(_item_likes.to_dict())
            _dict['likes'] = _items
        # override the default output from pydantic by calling `to_dict()` of parent
        if self.parent:
            _dict['parent'] = self.parent.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StatusUpdateResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "gid": obj.get("gid"),
            "resource_type": obj.get("resource_type"),
            "title": obj.get("title"),
            "resource_subtype": obj.get("resource_subtype"),
            "text": obj.get("text"),
            "html_text": obj.get("html_text"),
            "status_type": obj.get("status_type"),
            "author": UserCompact.from_dict(obj["author"]) if obj.get("author") is not None else None,
            "created_at": obj.get("created_at"),
            "created_by": UserCompact.from_dict(obj["created_by"]) if obj.get("created_by") is not None else None,
            "hearted": obj.get("hearted"),
            "hearts": [Like.from_dict(_item) for _item in obj["hearts"]] if obj.get("hearts") is not None else None,
            "liked": obj.get("liked"),
            "likes": [Like.from_dict(_item) for _item in obj["likes"]] if obj.get("likes") is not None else None,
            "modified_at": obj.get("modified_at"),
            "num_hearts": obj.get("num_hearts"),
            "num_likes": obj.get("num_likes"),
            "parent": StatusUpdateResponseAllOfParent.from_dict(obj["parent"]) if obj.get("parent") is not None else None
        })
        return _obj


