# coding: utf-8

"""
    Asana

    This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from asana_asyncio.models.asana_resource import AsanaResource
from asana_asyncio.models.custom_field_response import CustomFieldResponse
from asana_asyncio.models.custom_type_compact import CustomTypeCompact
from asana_asyncio.models.custom_type_status_option_compact import CustomTypeStatusOptionCompact
from asana_asyncio.models.like import Like
from asana_asyncio.models.project_compact import ProjectCompact
from asana_asyncio.models.tag_compact import TagCompact
from asana_asyncio.models.task_base_all_of_external import TaskBaseAllOfExternal
from asana_asyncio.models.task_base_all_of_memberships import TaskBaseAllOfMemberships
from asana_asyncio.models.task_compact_created_by import TaskCompactCreatedBy
from asana_asyncio.models.task_response_all_of_assignee_section import TaskResponseAllOfAssigneeSection
from asana_asyncio.models.task_response_all_of_parent import TaskResponseAllOfParent
from asana_asyncio.models.task_response_all_of_workspace import TaskResponseAllOfWorkspace
from asana_asyncio.models.user_compact import UserCompact
from typing import Optional, Set
from typing_extensions import Self

class TaskResponse(BaseModel):
    """
    TaskResponse
    """ # noqa: E501
    gid: Optional[StrictStr] = Field(default=None, description="Globally unique identifier of the resource, as a string.")
    resource_type: Optional[StrictStr] = Field(default=None, description="The base type of this resource.")
    name: Optional[StrictStr] = Field(default=None, description="Name of the task. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer.")
    resource_subtype: Optional[StrictStr] = Field(default=None, description="The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning. The resource_subtype `milestone` represent a single moment in time. This means tasks with this subtype cannot have a start_date.")
    created_by: Optional[TaskCompactCreatedBy] = None
    approval_status: Optional[StrictStr] = Field(default=None, description="*Conditional* Reflects the approval status of this task. This field is kept in sync with `completed`, meaning `pending` translates to false while `approved`, `rejected`, and `changes_requested` translate to true. If you set completed to true, this field will be set to `approved`.")
    assignee_status: Optional[StrictStr] = Field(default=None, description="*Deprecated* Scheduling status of this task for the user it is assigned to. This field can only be set if the assignee is non-null. Setting this field to \"inbox\" or \"upcoming\" inserts it at the top of the section, while the other options will insert at the bottom.")
    completed: Optional[StrictBool] = Field(default=None, description="True if the task is currently marked complete, false if not.")
    completed_at: Optional[datetime] = Field(default=None, description="The time at which this task was completed, or null if the task is incomplete.")
    completed_by: Optional[UserCompact] = None
    created_at: Optional[datetime] = Field(default=None, description="The time at which this resource was created.")
    dependencies: Optional[List[AsanaResource]] = Field(default=None, description="[Opt In](/docs/inputoutput-options). Array of resources referencing tasks that this task depends on. The objects contain only the gid of the dependency.")
    dependents: Optional[List[AsanaResource]] = Field(default=None, description="[Opt In](/docs/inputoutput-options). Array of resources referencing tasks that depend on this task. The objects contain only the ID of the dependent.")
    due_at: Optional[datetime] = Field(default=None, description="The UTC date and time on which this task is due, or null if the task has no due time. This takes an ISO 8601 date string in UTC and should not be used together with `due_on`.")
    due_on: Optional[date] = Field(default=None, description="The localized date on which this task is due, or null if the task has no due date. This takes a date with `YYYY-MM-DD` format and should not be used together with `due_at`.")
    external: Optional[TaskBaseAllOfExternal] = None
    html_notes: Optional[StrictStr] = Field(default=None, description="[Opt In](/docs/inputoutput-options). The notes of the text with formatting as HTML.")
    hearted: Optional[StrictBool] = Field(default=None, description="*Deprecated - please use liked instead* True if the task is hearted by the authorized user, false if not.")
    hearts: Optional[List[Like]] = Field(default=None, description="*Deprecated - please use likes instead* Array of likes for users who have hearted this task.")
    is_rendered_as_separator: Optional[StrictBool] = Field(default=None, description="[Opt In](/docs/inputoutput-options). In some contexts tasks can be rendered as a visual separator; for instance, subtasks can appear similar to [sections](/reference/sections) without being true `section` objects. If a `task` object is rendered this way in any context it will have the property `is_rendered_as_separator` set to `true`.")
    liked: Optional[StrictBool] = Field(default=None, description="True if the task is liked by the authorized user, false if not.")
    likes: Optional[List[Like]] = Field(default=None, description="Array of likes for users who have liked this task.")
    memberships: Optional[List[TaskBaseAllOfMemberships]] = Field(default=None, description="<p><strong style=\"color: #4573D2\">Full object requires scope: </strong><code>projects:read</code>, <code>project_sections:read</code></p>  *Create-only*. Array of projects this task is associated with and the section it is in. At task creation time, this array can be used to add the task to specific sections. After task creation, these associations can be modified using the `addProject` and `removeProject` endpoints. Note that over time, more types of memberships may be added to this property.")
    modified_at: Optional[datetime] = Field(default=None, description="The time at which this task was last modified.  The following conditions will change `modified_at`:  - story is created on a task - story is trashed on a task - attachment is trashed on a task - task is assigned or unassigned - custom field value is changed - the task itself is trashed - Or if any of the following fields are updated:   - completed   - name   - due_date   - description   - attachments   - items   - schedule_status  The following conditions will _not_ change `modified_at`:  - moving to a new container (project, portfolio, etc) - comments being added to the task (but the stories they generate   _will_ affect `modified_at`)")
    notes: Optional[StrictStr] = Field(default=None, description="Free-form textual information associated with the task (i.e. its description).")
    num_hearts: Optional[StrictInt] = Field(default=None, description="*Deprecated - please use likes instead* The number of users who have hearted this task.")
    num_likes: Optional[StrictInt] = Field(default=None, description="The number of users who have liked this task.")
    num_subtasks: Optional[StrictInt] = Field(default=None, description="[Opt In](/docs/inputoutput-options). The number of subtasks on this task. ")
    start_at: Optional[datetime] = Field(default=None, description="Date and time on which work begins for the task, or null if the task has no start time. This takes an ISO 8601 date string in UTC and should not be used together with `start_on`. *Note: `due_at` must be present in the request when setting or unsetting the `start_at` parameter.*")
    start_on: Optional[date] = Field(default=None, description="The day on which work begins for the task , or null if the task has no start date. This takes a date with `YYYY-MM-DD` format and should not be used together with `start_at`. *Note: `due_on` or `due_at` must be present in the request when setting or unsetting the `start_on` parameter.*")
    actual_time_minutes: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="<p><strong style=\"color: #4573D2\">Full object requires scope: </strong><code>time_tracking_entries:read</code></p>  This value represents the sum of all the Time Tracking entries in the Actual Time field on a given Task. It is represented as a nullable long value.")
    assignee: Optional[UserCompact] = None
    assignee_section: Optional[TaskResponseAllOfAssigneeSection] = None
    custom_fields: Optional[List[CustomFieldResponse]] = Field(default=None, description="<p><strong style=\"color: #4573D2\">Full object requires scope: </strong><code>custom_fields:read</code></p>  Array of custom field values applied to the task. These represent the custom field values recorded on this project for a particular custom field. For example, these custom field values will contain an `enum_value` property for custom fields of type `enum`, a `text_value` property for custom fields of type `text`, and so on. Please note that the `gid` returned on each custom field value *is identical* to the `gid` of the custom field, which allows referencing the custom field metadata through the `/custom_fields/custom_field_gid` endpoint.")
    custom_type: Optional[CustomTypeCompact] = None
    custom_type_status_option: Optional[CustomTypeStatusOptionCompact] = None
    followers: Optional[List[UserCompact]] = Field(default=None, description="Array of users following this task.")
    parent: Optional[TaskResponseAllOfParent] = None
    projects: Optional[List[ProjectCompact]] = Field(default=None, description="*Create-only.* Array of projects this task is associated with. At task creation time, this array can be used to add the task to many projects at once. After task creation, these associations can be modified using the addProject and removeProject endpoints.")
    tags: Optional[List[TagCompact]] = Field(default=None, description="Array of tags associated with this task. In order to change tags on an existing task use `addTag` and `removeTag`.")
    workspace: Optional[TaskResponseAllOfWorkspace] = None
    permalink_url: Optional[StrictStr] = Field(default=None, description="A url that points directly to the object within Asana.")
    __properties: ClassVar[List[str]] = ["gid", "resource_type", "name", "resource_subtype", "created_by", "approval_status", "assignee_status", "completed", "completed_at", "completed_by", "created_at", "dependencies", "dependents", "due_at", "due_on", "external", "html_notes", "hearted", "hearts", "is_rendered_as_separator", "liked", "likes", "memberships", "modified_at", "notes", "num_hearts", "num_likes", "num_subtasks", "start_at", "start_on", "actual_time_minutes", "assignee", "assignee_section", "custom_fields", "custom_type", "custom_type_status_option", "followers", "parent", "projects", "tags", "workspace", "permalink_url"]

    @field_validator('resource_subtype')
    def resource_subtype_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['default_task', 'milestone', 'approval']):
            raise ValueError("must be one of enum values ('default_task', 'milestone', 'approval')")
        return value

    @field_validator('approval_status')
    def approval_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['pending', 'approved', 'rejected', 'changes_requested']):
            raise ValueError("must be one of enum values ('pending', 'approved', 'rejected', 'changes_requested')")
        return value

    @field_validator('assignee_status')
    def assignee_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['today', 'upcoming', 'later', 'new', 'inbox']):
            raise ValueError("must be one of enum values ('today', 'upcoming', 'later', 'new', 'inbox')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TaskResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "gid",
            "resource_type",
            "completed_at",
            "completed_by",
            "created_at",
            "dependencies",
            "dependents",
            "hearted",
            "hearts",
            "is_rendered_as_separator",
            "likes",
            "memberships",
            "modified_at",
            "num_hearts",
            "num_likes",
            "num_subtasks",
            "actual_time_minutes",
            "custom_fields",
            "followers",
            "projects",
            "tags",
            "permalink_url",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['created_by'] = self.created_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of completed_by
        if self.completed_by:
            _dict['completed_by'] = self.completed_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in dependencies (list)
        _items = []
        if self.dependencies:
            for _item_dependencies in self.dependencies:
                if _item_dependencies:
                    _items.append(_item_dependencies.to_dict())
            _dict['dependencies'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in dependents (list)
        _items = []
        if self.dependents:
            for _item_dependents in self.dependents:
                if _item_dependents:
                    _items.append(_item_dependents.to_dict())
            _dict['dependents'] = _items
        # override the default output from pydantic by calling `to_dict()` of external
        if self.external:
            _dict['external'] = self.external.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in hearts (list)
        _items = []
        if self.hearts:
            for _item_hearts in self.hearts:
                if _item_hearts:
                    _items.append(_item_hearts.to_dict())
            _dict['hearts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in likes (list)
        _items = []
        if self.likes:
            for _item_likes in self.likes:
                if _item_likes:
                    _items.append(_item_likes.to_dict())
            _dict['likes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in memberships (list)
        _items = []
        if self.memberships:
            for _item_memberships in self.memberships:
                if _item_memberships:
                    _items.append(_item_memberships.to_dict())
            _dict['memberships'] = _items
        # override the default output from pydantic by calling `to_dict()` of assignee
        if self.assignee:
            _dict['assignee'] = self.assignee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of assignee_section
        if self.assignee_section:
            _dict['assignee_section'] = self.assignee_section.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in custom_fields (list)
        _items = []
        if self.custom_fields:
            for _item_custom_fields in self.custom_fields:
                if _item_custom_fields:
                    _items.append(_item_custom_fields.to_dict())
            _dict['custom_fields'] = _items
        # override the default output from pydantic by calling `to_dict()` of custom_type
        if self.custom_type:
            _dict['custom_type'] = self.custom_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custom_type_status_option
        if self.custom_type_status_option:
            _dict['custom_type_status_option'] = self.custom_type_status_option.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in followers (list)
        _items = []
        if self.followers:
            for _item_followers in self.followers:
                if _item_followers:
                    _items.append(_item_followers.to_dict())
            _dict['followers'] = _items
        # override the default output from pydantic by calling `to_dict()` of parent
        if self.parent:
            _dict['parent'] = self.parent.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in projects (list)
        _items = []
        if self.projects:
            for _item_projects in self.projects:
                if _item_projects:
                    _items.append(_item_projects.to_dict())
            _dict['projects'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item_tags in self.tags:
                if _item_tags:
                    _items.append(_item_tags.to_dict())
            _dict['tags'] = _items
        # override the default output from pydantic by calling `to_dict()` of workspace
        if self.workspace:
            _dict['workspace'] = self.workspace.to_dict()
        # set to None if completed_at (nullable) is None
        # and model_fields_set contains the field
        if self.completed_at is None and "completed_at" in self.model_fields_set:
            _dict['completed_at'] = None

        # set to None if completed_by (nullable) is None
        # and model_fields_set contains the field
        if self.completed_by is None and "completed_by" in self.model_fields_set:
            _dict['completed_by'] = None

        # set to None if due_at (nullable) is None
        # and model_fields_set contains the field
        if self.due_at is None and "due_at" in self.model_fields_set:
            _dict['due_at'] = None

        # set to None if due_on (nullable) is None
        # and model_fields_set contains the field
        if self.due_on is None and "due_on" in self.model_fields_set:
            _dict['due_on'] = None

        # set to None if start_at (nullable) is None
        # and model_fields_set contains the field
        if self.start_at is None and "start_at" in self.model_fields_set:
            _dict['start_at'] = None

        # set to None if start_on (nullable) is None
        # and model_fields_set contains the field
        if self.start_on is None and "start_on" in self.model_fields_set:
            _dict['start_on'] = None

        # set to None if actual_time_minutes (nullable) is None
        # and model_fields_set contains the field
        if self.actual_time_minutes is None and "actual_time_minutes" in self.model_fields_set:
            _dict['actual_time_minutes'] = None

        # set to None if assignee (nullable) is None
        # and model_fields_set contains the field
        if self.assignee is None and "assignee" in self.model_fields_set:
            _dict['assignee'] = None

        # set to None if custom_type (nullable) is None
        # and model_fields_set contains the field
        if self.custom_type is None and "custom_type" in self.model_fields_set:
            _dict['custom_type'] = None

        # set to None if custom_type_status_option (nullable) is None
        # and model_fields_set contains the field
        if self.custom_type_status_option is None and "custom_type_status_option" in self.model_fields_set:
            _dict['custom_type_status_option'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TaskResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "gid": obj.get("gid"),
            "resource_type": obj.get("resource_type"),
            "name": obj.get("name"),
            "resource_subtype": obj.get("resource_subtype"),
            "created_by": TaskCompactCreatedBy.from_dict(obj["created_by"]) if obj.get("created_by") is not None else None,
            "approval_status": obj.get("approval_status"),
            "assignee_status": obj.get("assignee_status"),
            "completed": obj.get("completed"),
            "completed_at": obj.get("completed_at"),
            "completed_by": UserCompact.from_dict(obj["completed_by"]) if obj.get("completed_by") is not None else None,
            "created_at": obj.get("created_at"),
            "dependencies": [AsanaResource.from_dict(_item) for _item in obj["dependencies"]] if obj.get("dependencies") is not None else None,
            "dependents": [AsanaResource.from_dict(_item) for _item in obj["dependents"]] if obj.get("dependents") is not None else None,
            "due_at": obj.get("due_at"),
            "due_on": obj.get("due_on"),
            "external": TaskBaseAllOfExternal.from_dict(obj["external"]) if obj.get("external") is not None else None,
            "html_notes": obj.get("html_notes"),
            "hearted": obj.get("hearted"),
            "hearts": [Like.from_dict(_item) for _item in obj["hearts"]] if obj.get("hearts") is not None else None,
            "is_rendered_as_separator": obj.get("is_rendered_as_separator"),
            "liked": obj.get("liked"),
            "likes": [Like.from_dict(_item) for _item in obj["likes"]] if obj.get("likes") is not None else None,
            "memberships": [TaskBaseAllOfMemberships.from_dict(_item) for _item in obj["memberships"]] if obj.get("memberships") is not None else None,
            "modified_at": obj.get("modified_at"),
            "notes": obj.get("notes"),
            "num_hearts": obj.get("num_hearts"),
            "num_likes": obj.get("num_likes"),
            "num_subtasks": obj.get("num_subtasks"),
            "start_at": obj.get("start_at"),
            "start_on": obj.get("start_on"),
            "actual_time_minutes": obj.get("actual_time_minutes"),
            "assignee": UserCompact.from_dict(obj["assignee"]) if obj.get("assignee") is not None else None,
            "assignee_section": TaskResponseAllOfAssigneeSection.from_dict(obj["assignee_section"]) if obj.get("assignee_section") is not None else None,
            "custom_fields": [CustomFieldResponse.from_dict(_item) for _item in obj["custom_fields"]] if obj.get("custom_fields") is not None else None,
            "custom_type": CustomTypeCompact.from_dict(obj["custom_type"]) if obj.get("custom_type") is not None else None,
            "custom_type_status_option": CustomTypeStatusOptionCompact.from_dict(obj["custom_type_status_option"]) if obj.get("custom_type_status_option") is not None else None,
            "followers": [UserCompact.from_dict(_item) for _item in obj["followers"]] if obj.get("followers") is not None else None,
            "parent": TaskResponseAllOfParent.from_dict(obj["parent"]) if obj.get("parent") is not None else None,
            "projects": [ProjectCompact.from_dict(_item) for _item in obj["projects"]] if obj.get("projects") is not None else None,
            "tags": [TagCompact.from_dict(_item) for _item in obj["tags"]] if obj.get("tags") is not None else None,
            "workspace": TaskResponseAllOfWorkspace.from_dict(obj["workspace"]) if obj.get("workspace") is not None else None,
            "permalink_url": obj.get("permalink_url")
        })
        return _obj


