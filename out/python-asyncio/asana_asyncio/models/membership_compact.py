# coding: utf-8

"""
    Asana

    This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401

from typing import Optional
from pydantic import BaseModel, Field, StrictStr, ValidationError, field_validator
from asana_asyncio.models.goal_membership_compact import GoalMembershipCompact
from asana_asyncio.models.project_membership_compact_response import ProjectMembershipCompactResponse
from typing import Union, Any, List, TYPE_CHECKING, Optional, Dict
from typing_extensions import Literal
from pydantic import StrictStr, Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

MEMBERSHIPCOMPACT_ANY_OF_SCHEMAS = ["GoalMembershipCompact", "ProjectMembershipCompactResponse"]

class MembershipCompact(BaseModel):
    """
    MembershipCompact
    """

    # data type: GoalMembershipCompact
    anyof_schema_1_validator: Optional[GoalMembershipCompact] = None
    # data type: ProjectMembershipCompactResponse
    anyof_schema_2_validator: Optional[ProjectMembershipCompactResponse] = None
    if TYPE_CHECKING:
        actual_instance: Optional[Union[GoalMembershipCompact, ProjectMembershipCompactResponse]] = None
    else:
        actual_instance: Any = None
    any_of_schemas: List[str] = Literal[MEMBERSHIPCOMPACT_ANY_OF_SCHEMAS]

    model_config = {
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_anyof(cls, v):
        instance = MembershipCompact.model_construct()
        error_messages = []
        # validate data type: GoalMembershipCompact
        if not isinstance(v, GoalMembershipCompact):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GoalMembershipCompact`")
        else:
            return v

        # validate data type: ProjectMembershipCompactResponse
        if not isinstance(v, ProjectMembershipCompactResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ProjectMembershipCompactResponse`")
        else:
            return v

        if error_messages:
            # no match
            raise ValueError("No match found when setting the actual_instance in MembershipCompact with anyOf schemas: GoalMembershipCompact, ProjectMembershipCompactResponse. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        # anyof_schema_1_validator: Optional[GoalMembershipCompact] = None
        try:
            instance.actual_instance = GoalMembershipCompact.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_2_validator: Optional[ProjectMembershipCompactResponse] = None
        try:
            instance.actual_instance = ProjectMembershipCompactResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))

        if error_messages:
            # no match
            raise ValueError("No match found when deserializing the JSON string into MembershipCompact with anyOf schemas: GoalMembershipCompact, ProjectMembershipCompactResponse. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_dict()
        else:
            return json.dumps(self.actual_instance)

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


