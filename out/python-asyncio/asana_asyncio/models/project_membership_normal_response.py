# coding: utf-8

"""
    Asana

    This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr, field_validator
from pydantic import Field
from asana_asyncio.models.member_compact import MemberCompact
from asana_asyncio.models.project_compact import ProjectCompact
from asana_asyncio.models.user_compact import UserCompact
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ProjectMembershipNormalResponse(BaseModel):
    """
    ProjectMembershipNormalResponse
    """ # noqa: E501
    gid: Optional[StrictStr] = Field(default=None, description="Globally unique identifier of the resource, as a string.")
    resource_type: Optional[StrictStr] = Field(default=None, description="The base type of this resource.")
    parent: Optional[ProjectCompact] = None
    member: Optional[MemberCompact] = None
    access_level: Optional[StrictStr] = Field(default=None, description="Whether the member has admin, editor, commenter, or viewer access to the project.")
    user: Optional[UserCompact] = None
    project: Optional[ProjectCompact] = None
    write_access: Optional[StrictStr] = Field(default=None, description="Whether the member has full access or comment-only access to the project.")
    __properties: ClassVar[List[str]] = ["gid", "resource_type", "parent", "member", "access_level", "user", "project", "write_access"]

    @field_validator('access_level')
    def access_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('admin', 'editor', 'commenter', 'viewer'):
            raise ValueError("must be one of enum values ('admin', 'editor', 'commenter', 'viewer')")
        return value

    @field_validator('write_access')
    def write_access_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('full_write', 'comment_only'):
            raise ValueError("must be one of enum values ('full_write', 'comment_only')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ProjectMembershipNormalResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "gid",
                "access_level",
                "write_access",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of parent
        if self.parent:
            _dict['parent'] = self.parent.to_dict()
        # override the default output from pydantic by calling `to_dict()` of member
        if self.member:
            _dict['member'] = self.member.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of project
        if self.project:
            _dict['project'] = self.project.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ProjectMembershipNormalResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "gid": obj.get("gid"),
            "resource_type": obj.get("resource_type"),
            "parent": ProjectCompact.from_dict(obj.get("parent")) if obj.get("parent") is not None else None,
            "member": MemberCompact.from_dict(obj.get("member")) if obj.get("member") is not None else None,
            "access_level": obj.get("access_level"),
            "user": UserCompact.from_dict(obj.get("user")) if obj.get("user") is not None else None,
            "project": ProjectCompact.from_dict(obj.get("project")) if obj.get("project") is not None else None,
            "write_access": obj.get("write_access")
        })
        return _obj


