# coding: utf-8

"""
    Asana

    This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class TaskAddProjectRequest(BaseModel):
    """
    TaskAddProjectRequest
    """ # noqa: E501
    project: StrictStr = Field(description="The project to add the task to.")
    insert_after: Optional[StrictStr] = Field(default=None, description="A task in the project to insert the task after, or `null` to insert at the beginning of the list.")
    insert_before: Optional[StrictStr] = Field(default=None, description="A task in the project to insert the task before, or `null` to insert at the end of the list.")
    section: Optional[StrictStr] = Field(default=None, description="A section in the project to insert the task into. The task will be inserted at the bottom of the section.")
    __properties: ClassVar[List[str]] = ["project", "insert_after", "insert_before", "section"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TaskAddProjectRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if insert_after (nullable) is None
        # and model_fields_set contains the field
        if self.insert_after is None and "insert_after" in self.model_fields_set:
            _dict['insert_after'] = None

        # set to None if insert_before (nullable) is None
        # and model_fields_set contains the field
        if self.insert_before is None and "insert_before" in self.model_fields_set:
            _dict['insert_before'] = None

        # set to None if section (nullable) is None
        # and model_fields_set contains the field
        if self.section is None and "section" in self.model_fields_set:
            _dict['section'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TaskAddProjectRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "project": obj.get("project"),
            "insert_after": obj.get("insert_after"),
            "insert_before": obj.get("insert_before"),
            "section": obj.get("section")
        })
        return _obj


