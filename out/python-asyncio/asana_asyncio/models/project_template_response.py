# coding: utf-8

"""
    Asana

    This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from asana_asyncio.models.date_variable_compact import DateVariableCompact
from asana_asyncio.models.project_template_base_all_of_owner import ProjectTemplateBaseAllOfOwner
from asana_asyncio.models.team_compact import TeamCompact
from asana_asyncio.models.template_role import TemplateRole
from typing import Optional, Set
from typing_extensions import Self

class ProjectTemplateResponse(BaseModel):
    """
    ProjectTemplateResponse
    """ # noqa: E501
    gid: Optional[StrictStr] = Field(default=None, description="Globally unique identifier of the resource, as a string.")
    resource_type: Optional[StrictStr] = Field(default=None, description="The base type of this resource.")
    name: Optional[StrictStr] = Field(default=None, description="Name of the project template.")
    description: Optional[StrictStr] = Field(default=None, description="Free-form textual information associated with the project template")
    html_description: Optional[StrictStr] = Field(default=None, description="The description of the project template with formatting as HTML.")
    public: Optional[StrictBool] = Field(default=None, description="True if the project template is public to its team.")
    owner: Optional[ProjectTemplateBaseAllOfOwner] = None
    team: Optional[TeamCompact] = None
    requested_dates: Optional[List[DateVariableCompact]] = Field(default=None, description="Array of date variables in this project template. Calendar dates must be provided for these variables when instantiating a project.")
    color: Optional[StrictStr] = Field(default=None, description="Color of the project template.")
    requested_roles: Optional[List[TemplateRole]] = Field(default=None, description="Array of template roles in this project template. User Ids can be provided for these variables when instantiating a project to assign template tasks to the user.")
    __properties: ClassVar[List[str]] = ["gid", "resource_type", "name", "description", "html_description", "public", "owner", "team", "requested_dates", "color", "requested_roles"]

    @field_validator('color')
    def color_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['dark-pink', 'dark-green', 'dark-blue', 'dark-red', 'dark-teal', 'dark-brown', 'dark-orange', 'dark-purple', 'dark-warm-gray', 'light-pink', 'light-green', 'yellow-orange', 'yellow-green', 'yellow', 'red', 'purple', 'pink', 'orange', 'magenta', 'indigo', 'hot-pink', 'green', 'cool-gray', 'blue-green', 'blue', 'white', 'aqua', 'light-blue', 'light-red', 'light-teal', 'light-brown', 'light-orange', 'light-purple', 'light-warm-gray']):
            raise ValueError("must be one of enum values ('dark-pink', 'dark-green', 'dark-blue', 'dark-red', 'dark-teal', 'dark-brown', 'dark-orange', 'dark-purple', 'dark-warm-gray', 'light-pink', 'light-green', 'yellow-orange', 'yellow-green', 'yellow', 'red', 'purple', 'pink', 'orange', 'magenta', 'indigo', 'hot-pink', 'green', 'cool-gray', 'blue-green', 'blue', 'white', 'aqua', 'light-blue', 'light-red', 'light-teal', 'light-brown', 'light-orange', 'light-purple', 'light-warm-gray')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProjectTemplateResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "gid",
            "resource_type",
            "requested_dates",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of owner
        if self.owner:
            _dict['owner'] = self.owner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of team
        if self.team:
            _dict['team'] = self.team.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in requested_dates (list)
        _items = []
        if self.requested_dates:
            for _item_requested_dates in self.requested_dates:
                if _item_requested_dates:
                    _items.append(_item_requested_dates.to_dict())
            _dict['requested_dates'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in requested_roles (list)
        _items = []
        if self.requested_roles:
            for _item_requested_roles in self.requested_roles:
                if _item_requested_roles:
                    _items.append(_item_requested_roles.to_dict())
            _dict['requested_roles'] = _items
        # set to None if color (nullable) is None
        # and model_fields_set contains the field
        if self.color is None and "color" in self.model_fields_set:
            _dict['color'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProjectTemplateResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "gid": obj.get("gid"),
            "resource_type": obj.get("resource_type"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "html_description": obj.get("html_description"),
            "public": obj.get("public"),
            "owner": ProjectTemplateBaseAllOfOwner.from_dict(obj["owner"]) if obj.get("owner") is not None else None,
            "team": TeamCompact.from_dict(obj["team"]) if obj.get("team") is not None else None,
            "requested_dates": [DateVariableCompact.from_dict(_item) for _item in obj["requested_dates"]] if obj.get("requested_dates") is not None else None,
            "color": obj.get("color"),
            "requested_roles": [TemplateRole.from_dict(_item) for _item in obj["requested_roles"]] if obj.get("requested_roles") is not None else None
        })
        return _obj


