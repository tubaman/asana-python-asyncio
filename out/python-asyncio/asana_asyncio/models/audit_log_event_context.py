# coding: utf-8

"""
    Asana

    This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AuditLogEventContext(BaseModel):
    """
    The context from which this event originated.
    """ # noqa: E501
    context_type: Optional[StrictStr] = Field(default=None, description="The type of context. Can be one of `web`, `desktop`, `mobile`, `asana_support`, `asana`, `email`, or `api`.")
    api_authentication_method: Optional[StrictStr] = Field(default=None, description="The authentication method used in the context of an API request. Only present if the `context_type` is `api`. Can be one of `cookie`, `oauth`, `personal_access_token`, or `service_account`.")
    client_ip_address: Optional[StrictStr] = Field(default=None, description="The IP address of the client that initiated the event, if applicable.")
    user_agent: Optional[StrictStr] = Field(default=None, description="The user agent of the client that initiated the event, if applicable.")
    oauth_app_name: Optional[StrictStr] = Field(default=None, description="The name of the OAuth App that initiated the event. Only present if the `api_authentication_method` is `oauth`.")
    rule_name: Optional[StrictStr] = Field(default=None, description="The name of the automation rule that initiated the event.")
    __properties: ClassVar[List[str]] = ["context_type", "api_authentication_method", "client_ip_address", "user_agent", "oauth_app_name", "rule_name"]

    @field_validator('context_type')
    def context_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['web', 'desktop', 'mobile', 'asana_support', 'asana', 'email', 'api']):
            raise ValueError("must be one of enum values ('web', 'desktop', 'mobile', 'asana_support', 'asana', 'email', 'api')")
        return value

    @field_validator('api_authentication_method')
    def api_authentication_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['cookie', 'oauth', 'personal_access_token', 'service_account']):
            raise ValueError("must be one of enum values ('cookie', 'oauth', 'personal_access_token', 'service_account')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AuditLogEventContext from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AuditLogEventContext from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "context_type": obj.get("context_type"),
            "api_authentication_method": obj.get("api_authentication_method"),
            "client_ip_address": obj.get("client_ip_address"),
            "user_agent": obj.get("user_agent"),
            "oauth_app_name": obj.get("oauth_app_name"),
            "rule_name": obj.get("rule_name")
        })
        return _obj


