# coding: utf-8

"""
    Asana

    This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
from asana_asyncio.models.attachment_response_all_of_parent import AttachmentResponseAllOfParent
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class AttachmentResponse(BaseModel):
    """
    AttachmentResponse
    """ # noqa: E501
    gid: Optional[StrictStr] = Field(default=None, description="Globally unique identifier of the resource, as a string.")
    resource_type: Optional[StrictStr] = Field(default=None, description="The base type of this resource.")
    name: Optional[StrictStr] = Field(default=None, description="The name of the file.")
    resource_subtype: Optional[StrictStr] = Field(default=None, description="The service hosting the attachment. Valid values are `asana`, `dropbox`, `gdrive`, `onedrive`, `box`, `vimeo`, and `external`.")
    created_at: Optional[datetime] = Field(default=None, description="The time at which this resource was created.")
    download_url: Optional[StrictStr] = Field(default=None, description="The URL containing the content of the attachment. *Note:* May be null if the attachment is hosted by [Box](https://www.box.com/) and will be null if the attachment is a Video Message hosted by [Vimeo](https://vimeo.com/). If present, this URL may only be valid for two minutes from the time of retrieval. You should avoid persisting this URL somewhere and just refresh it on demand to ensure you do not keep stale URLs.")
    permanent_url: Optional[StrictStr] = None
    host: Optional[StrictStr] = Field(default=None, description="The service hosting the attachment. Valid values are `asana`, `dropbox`, `gdrive`, `box`, and `vimeo`.")
    parent: Optional[AttachmentResponseAllOfParent] = None
    size: Optional[StrictInt] = Field(default=None, description="The size of the attachment in bytes. Only present when the `resource_subtype` is `asana`.")
    view_url: Optional[StrictStr] = Field(default=None, description="The URL where the attachment can be viewed, which may be friendlier to users in a browser than just directing them to a raw file. May be null if no view URL exists for the service.")
    connected_to_app: Optional[StrictBool] = Field(default=None, description="Whether the attachment is connected to the app making the request for the purposes of showing an app components widget. Only present when the `resource_subtype` is `external` or `gdrive`.")
    __properties: ClassVar[List[str]] = ["gid", "resource_type", "name", "resource_subtype", "created_at", "download_url", "permanent_url", "host", "parent", "size", "view_url", "connected_to_app"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of AttachmentResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "gid",
                "resource_type",
                "name",
                "created_at",
                "download_url",
                "permanent_url",
                "host",
                "size",
                "view_url",
                "connected_to_app",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of parent
        if self.parent:
            _dict['parent'] = self.parent.to_dict()
        # set to None if download_url (nullable) is None
        # and model_fields_set contains the field
        if self.download_url is None and "download_url" in self.model_fields_set:
            _dict['download_url'] = None

        # set to None if permanent_url (nullable) is None
        # and model_fields_set contains the field
        if self.permanent_url is None and "permanent_url" in self.model_fields_set:
            _dict['permanent_url'] = None

        # set to None if view_url (nullable) is None
        # and model_fields_set contains the field
        if self.view_url is None and "view_url" in self.model_fields_set:
            _dict['view_url'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of AttachmentResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "gid": obj.get("gid"),
            "resource_type": obj.get("resource_type"),
            "name": obj.get("name"),
            "resource_subtype": obj.get("resource_subtype"),
            "created_at": obj.get("created_at"),
            "download_url": obj.get("download_url"),
            "permanent_url": obj.get("permanent_url"),
            "host": obj.get("host"),
            "parent": AttachmentResponseAllOfParent.from_dict(obj.get("parent")) if obj.get("parent") is not None else None,
            "size": obj.get("size"),
            "view_url": obj.get("view_url"),
            "connected_to_app": obj.get("connected_to_app")
        })
        return _obj


