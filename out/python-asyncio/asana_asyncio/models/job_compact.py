# coding: utf-8

"""
    Asana

    This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from asana_asyncio.models.graph_export_compact import GraphExportCompact
from asana_asyncio.models.job_compact_new_task import JobCompactNewTask
from asana_asyncio.models.project_compact import ProjectCompact
from asana_asyncio.models.project_template_compact import ProjectTemplateCompact
from typing import Optional, Set
from typing_extensions import Self

class JobCompact(BaseModel):
    """
    A *job* is an object representing a process that handles asynchronous work.
    """ # noqa: E501
    gid: Optional[StrictStr] = Field(default=None, description="Globally unique identifier of the resource, as a string.")
    resource_type: Optional[StrictStr] = Field(default=None, description="The base type of this resource.")
    resource_subtype: Optional[StrictStr] = Field(default=None, description="The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.")
    status: Optional[StrictStr] = Field(default=None, description="The current status of this job.")
    new_project: Optional[ProjectCompact] = None
    new_task: Optional[JobCompactNewTask] = None
    new_project_template: Optional[ProjectTemplateCompact] = None
    new_graph_export: Optional[GraphExportCompact] = None
    __properties: ClassVar[List[str]] = ["gid", "resource_type", "resource_subtype", "status", "new_project", "new_task", "new_project_template", "new_graph_export"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['not_started', 'in_progress', 'succeeded', 'failed']):
            raise ValueError("must be one of enum values ('not_started', 'in_progress', 'succeeded', 'failed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JobCompact from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "gid",
            "resource_type",
            "resource_subtype",
            "status",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of new_project
        if self.new_project:
            _dict['new_project'] = self.new_project.to_dict()
        # override the default output from pydantic by calling `to_dict()` of new_task
        if self.new_task:
            _dict['new_task'] = self.new_task.to_dict()
        # override the default output from pydantic by calling `to_dict()` of new_project_template
        if self.new_project_template:
            _dict['new_project_template'] = self.new_project_template.to_dict()
        # override the default output from pydantic by calling `to_dict()` of new_graph_export
        if self.new_graph_export:
            _dict['new_graph_export'] = self.new_graph_export.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JobCompact from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "gid": obj.get("gid"),
            "resource_type": obj.get("resource_type"),
            "resource_subtype": obj.get("resource_subtype"),
            "status": obj.get("status"),
            "new_project": ProjectCompact.from_dict(obj["new_project"]) if obj.get("new_project") is not None else None,
            "new_task": JobCompactNewTask.from_dict(obj["new_task"]) if obj.get("new_task") is not None else None,
            "new_project_template": ProjectTemplateCompact.from_dict(obj["new_project_template"]) if obj.get("new_project_template") is not None else None,
            "new_graph_export": GraphExportCompact.from_dict(obj["new_graph_export"]) if obj.get("new_graph_export") is not None else None
        })
        return _obj


