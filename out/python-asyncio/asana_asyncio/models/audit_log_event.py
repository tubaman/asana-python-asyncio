# coding: utf-8

"""
    Asana

    This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
from asana_asyncio.models.audit_log_event_actor import AuditLogEventActor
from asana_asyncio.models.audit_log_event_context import AuditLogEventContext
from asana_asyncio.models.audit_log_event_resource import AuditLogEventResource
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class AuditLogEvent(BaseModel):
    """
    An object representing a single event within an Asana domain.  Every audit log event is comprised of an `event_type`, `actor`, `resource`, and `context`. Some events will include additional metadata about the event under `details`. See our [currently supported list of events](/docs/audit-log-events#supported-audit-log-events) for more details.
    """ # noqa: E501
    gid: Optional[StrictStr] = Field(default=None, description="Globally unique identifier of the `AuditLogEvent`, as a string.")
    created_at: Optional[datetime] = Field(default=None, description="The time the event was created.")
    event_type: Optional[StrictStr] = Field(default=None, description="The type of the event.")
    event_category: Optional[StrictStr] = Field(default=None, description="The category that this `event_type` belongs to.")
    actor: Optional[AuditLogEventActor] = None
    resource: Optional[AuditLogEventResource] = None
    details: Optional[Dict[str, Any]] = Field(default=None, description="Event specific details. The schema will vary depending on the `event_type`.")
    context: Optional[AuditLogEventContext] = None
    __properties: ClassVar[List[str]] = ["gid", "created_at", "event_type", "event_category", "actor", "resource", "details", "context"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of AuditLogEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of actor
        if self.actor:
            _dict['actor'] = self.actor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resource
        if self.resource:
            _dict['resource'] = self.resource.to_dict()
        # override the default output from pydantic by calling `to_dict()` of context
        if self.context:
            _dict['context'] = self.context.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of AuditLogEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "gid": obj.get("gid"),
            "created_at": obj.get("created_at"),
            "event_type": obj.get("event_type"),
            "event_category": obj.get("event_category"),
            "actor": AuditLogEventActor.from_dict(obj.get("actor")) if obj.get("actor") is not None else None,
            "resource": AuditLogEventResource.from_dict(obj.get("resource")) if obj.get("resource") is not None else None,
            "details": obj.get("details"),
            "context": AuditLogEventContext.from_dict(obj.get("context")) if obj.get("context") is not None else None
        })
        return _obj


