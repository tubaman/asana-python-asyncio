# coding: utf-8

"""
    Asana

    This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from asana_asyncio.models.goal_membership_base_goal import GoalMembershipBaseGoal
from asana_asyncio.models.goal_membership_base_parent import GoalMembershipBaseParent
from asana_asyncio.models.goal_membership_response_all_of_user import GoalMembershipResponseAllOfUser
from asana_asyncio.models.goal_membership_response_all_of_workspace import GoalMembershipResponseAllOfWorkspace
from asana_asyncio.models.member_compact import MemberCompact
from typing import Optional, Set
from typing_extensions import Self

class GoalMembershipResponse(BaseModel):
    """
    GoalMembershipResponse
    """ # noqa: E501
    gid: Optional[StrictStr] = Field(default=None, description="Globally unique identifier of the resource, as a string.")
    resource_type: Optional[StrictStr] = Field(default=None, description="The base type of this resource.")
    resource_subtype: Optional[StrictStr] = Field(default=None, description="The type of membership.")
    member: Optional[MemberCompact] = None
    parent: Optional[GoalMembershipBaseParent] = None
    role: Optional[StrictStr] = Field(default=None, description="*Deprecated: Describes if the member is a commenter or editor in goal.*")
    access_level: Optional[StrictStr] = Field(default=None, description="Describes if member is commenter or editor in goal. This is preferred over role")
    goal: Optional[GoalMembershipBaseGoal] = None
    user: Optional[GoalMembershipResponseAllOfUser] = None
    workspace: Optional[GoalMembershipResponseAllOfWorkspace] = None
    __properties: ClassVar[List[str]] = ["gid", "resource_type", "resource_subtype", "member", "parent", "role", "access_level", "goal", "user", "workspace"]

    @field_validator('role')
    def role_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['commenter', 'editor']):
            raise ValueError("must be one of enum values ('commenter', 'editor')")
        return value

    @field_validator('access_level')
    def access_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['commenter', 'editor']):
            raise ValueError("must be one of enum values ('commenter', 'editor')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoalMembershipResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "gid",
            "resource_subtype",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of member
        if self.member:
            _dict['member'] = self.member.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parent
        if self.parent:
            _dict['parent'] = self.parent.to_dict()
        # override the default output from pydantic by calling `to_dict()` of goal
        if self.goal:
            _dict['goal'] = self.goal.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of workspace
        if self.workspace:
            _dict['workspace'] = self.workspace.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoalMembershipResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "gid": obj.get("gid"),
            "resource_type": obj.get("resource_type"),
            "resource_subtype": obj.get("resource_subtype"),
            "member": MemberCompact.from_dict(obj["member"]) if obj.get("member") is not None else None,
            "parent": GoalMembershipBaseParent.from_dict(obj["parent"]) if obj.get("parent") is not None else None,
            "role": obj.get("role"),
            "access_level": obj.get("access_level"),
            "goal": GoalMembershipBaseGoal.from_dict(obj["goal"]) if obj.get("goal") is not None else None,
            "user": GoalMembershipResponseAllOfUser.from_dict(obj["user"]) if obj.get("user") is not None else None,
            "workspace": GoalMembershipResponseAllOfWorkspace.from_dict(obj["workspace"]) if obj.get("workspace") is not None else None
        })
        return _obj


