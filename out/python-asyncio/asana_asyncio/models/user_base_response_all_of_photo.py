# coding: utf-8

"""
    Asana

    This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UserBaseResponseAllOfPhoto(BaseModel):
    """
    A map of the user's profile photo in various sizes, or null if no photo is set. Sizes provided are 21, 27, 36, 60, 128, and 1024. All images are in PNG format, except for 1024 (which is in JPEG format).
    """ # noqa: E501
    image_21x21: Optional[StrictStr] = Field(default=None, description="PNG image of the user at 21x21 pixels.")
    image_27x27: Optional[StrictStr] = Field(default=None, description="PNG image of the user at 27x27 pixels.")
    image_36x36: Optional[StrictStr] = Field(default=None, description="PNG image of the user at 36x36 pixels.")
    image_60x60: Optional[StrictStr] = Field(default=None, description="PNG image of the user at 60x60 pixels.")
    image_128x128: Optional[StrictStr] = Field(default=None, description="PNG image of the user at 128x128 pixels.")
    image_1024x1024: Optional[StrictStr] = Field(default=None, description="JPEG image of the user at 1024x1024 pixels.")
    __properties: ClassVar[List[str]] = ["image_21x21", "image_27x27", "image_36x36", "image_60x60", "image_128x128", "image_1024x1024"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserBaseResponseAllOfPhoto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserBaseResponseAllOfPhoto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "image_21x21": obj.get("image_21x21"),
            "image_27x27": obj.get("image_27x27"),
            "image_36x36": obj.get("image_36x36"),
            "image_60x60": obj.get("image_60x60"),
            "image_128x128": obj.get("image_128x128"),
            "image_1024x1024": obj.get("image_1024x1024")
        })
        return _obj


