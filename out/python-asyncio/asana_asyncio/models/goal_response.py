# coding: utf-8

"""
    Asana

    This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from asana_asyncio.models.goal_response_all_of_metric import GoalResponseAllOfMetric
from asana_asyncio.models.goal_response_all_of_owner import GoalResponseAllOfOwner
from asana_asyncio.models.goal_response_all_of_team import GoalResponseAllOfTeam
from asana_asyncio.models.goal_response_all_of_time_period import GoalResponseAllOfTimePeriod
from asana_asyncio.models.goal_response_all_of_workspace import GoalResponseAllOfWorkspace
from asana_asyncio.models.like import Like
from asana_asyncio.models.status_update_compact import StatusUpdateCompact
from asana_asyncio.models.user_compact import UserCompact
from typing import Optional, Set
from typing_extensions import Self

class GoalResponse(BaseModel):
    """
    GoalResponse
    """ # noqa: E501
    gid: Optional[StrictStr] = Field(default=None, description="Globally unique identifier of the resource, as a string.")
    resource_type: Optional[StrictStr] = Field(default=None, description="The base type of this resource.")
    name: Optional[StrictStr] = Field(default=None, description="The name of the goal.")
    html_notes: Optional[StrictStr] = Field(default=None, description="The notes of the goal with formatting as HTML.")
    notes: Optional[StrictStr] = Field(default=None, description="Free-form textual information associated with the goal (i.e. its description).")
    due_on: Optional[StrictStr] = Field(default=None, description="The localized day on which this goal is due. This takes a date with format `YYYY-MM-DD`.")
    start_on: Optional[StrictStr] = Field(default=None, description="The day on which work for this goal begins, or null if the goal has no start date. This takes a date with `YYYY-MM-DD` format, and cannot be set unless there is an accompanying due date.")
    is_workspace_level: Optional[StrictBool] = Field(default=None, description="*Conditional*. This property is only present when the `workspace` provided is an organization. Whether the goal belongs to the `workspace` (and is listed as part of the workspace’s goals) or not. If it isn’t a workspace-level goal, it is a team-level goal, and is associated with the goal’s team.")
    liked: Optional[StrictBool] = Field(default=None, description="True if the goal is liked by the authorized user, false if not.")
    likes: Optional[List[Like]] = Field(default=None, description="Array of likes for users who have liked this goal.")
    num_likes: Optional[StrictInt] = Field(default=None, description="The number of users who have liked this goal.")
    team: Optional[GoalResponseAllOfTeam] = None
    workspace: Optional[GoalResponseAllOfWorkspace] = None
    followers: Optional[List[UserCompact]] = Field(default=None, description="Array of users who are members of this goal.")
    time_period: Optional[GoalResponseAllOfTimePeriod] = None
    metric: Optional[GoalResponseAllOfMetric] = None
    owner: Optional[GoalResponseAllOfOwner] = None
    current_status_update: Optional[StatusUpdateCompact] = Field(default=None, description="The latest `status_update` posted to this goal.")
    status: Optional[StrictStr] = Field(default=None, description="The current status of this goal. When the goal is open, its status can be `green`, `yellow`, and `red` to reflect \"On Track\", \"At Risk\", and \"Off Track\", respectively. When the goal is closed, the value can be `missed`, `achieved`, `partial`, or `dropped`. *Note* you can only write to this property if `metric` is set.")
    __properties: ClassVar[List[str]] = ["gid", "resource_type", "name", "html_notes", "notes", "due_on", "start_on", "is_workspace_level", "liked", "likes", "num_likes", "team", "workspace", "followers", "time_period", "metric", "owner", "current_status_update", "status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoalResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "gid",
            "resource_type",
            "likes",
            "num_likes",
            "status",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in likes (list)
        _items = []
        if self.likes:
            for _item_likes in self.likes:
                if _item_likes:
                    _items.append(_item_likes.to_dict())
            _dict['likes'] = _items
        # override the default output from pydantic by calling `to_dict()` of team
        if self.team:
            _dict['team'] = self.team.to_dict()
        # override the default output from pydantic by calling `to_dict()` of workspace
        if self.workspace:
            _dict['workspace'] = self.workspace.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in followers (list)
        _items = []
        if self.followers:
            for _item_followers in self.followers:
                if _item_followers:
                    _items.append(_item_followers.to_dict())
            _dict['followers'] = _items
        # override the default output from pydantic by calling `to_dict()` of time_period
        if self.time_period:
            _dict['time_period'] = self.time_period.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metric
        if self.metric:
            _dict['metric'] = self.metric.to_dict()
        # override the default output from pydantic by calling `to_dict()` of owner
        if self.owner:
            _dict['owner'] = self.owner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of current_status_update
        if self.current_status_update:
            _dict['current_status_update'] = self.current_status_update.to_dict()
        # set to None if due_on (nullable) is None
        # and model_fields_set contains the field
        if self.due_on is None and "due_on" in self.model_fields_set:
            _dict['due_on'] = None

        # set to None if start_on (nullable) is None
        # and model_fields_set contains the field
        if self.start_on is None and "start_on" in self.model_fields_set:
            _dict['start_on'] = None

        # set to None if current_status_update (nullable) is None
        # and model_fields_set contains the field
        if self.current_status_update is None and "current_status_update" in self.model_fields_set:
            _dict['current_status_update'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoalResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "gid": obj.get("gid"),
            "resource_type": obj.get("resource_type"),
            "name": obj.get("name"),
            "html_notes": obj.get("html_notes"),
            "notes": obj.get("notes"),
            "due_on": obj.get("due_on"),
            "start_on": obj.get("start_on"),
            "is_workspace_level": obj.get("is_workspace_level"),
            "liked": obj.get("liked"),
            "likes": [Like.from_dict(_item) for _item in obj["likes"]] if obj.get("likes") is not None else None,
            "num_likes": obj.get("num_likes"),
            "team": GoalResponseAllOfTeam.from_dict(obj["team"]) if obj.get("team") is not None else None,
            "workspace": GoalResponseAllOfWorkspace.from_dict(obj["workspace"]) if obj.get("workspace") is not None else None,
            "followers": [UserCompact.from_dict(_item) for _item in obj["followers"]] if obj.get("followers") is not None else None,
            "time_period": GoalResponseAllOfTimePeriod.from_dict(obj["time_period"]) if obj.get("time_period") is not None else None,
            "metric": GoalResponseAllOfMetric.from_dict(obj["metric"]) if obj.get("metric") is not None else None,
            "owner": GoalResponseAllOfOwner.from_dict(obj["owner"]) if obj.get("owner") is not None else None,
            "current_status_update": StatusUpdateCompact.from_dict(obj["current_status_update"]) if obj.get("current_status_update") is not None else None,
            "status": obj.get("status")
        })
        return _obj


