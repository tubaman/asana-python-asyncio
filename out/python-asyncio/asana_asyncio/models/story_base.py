# coding: utf-8

"""
    Asana

    This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class StoryBase(BaseModel):
    """
    A story represents an activity associated with an object in the Asana system.
    """ # noqa: E501
    gid: Optional[StrictStr] = Field(default=None, description="Globally unique identifier of the resource, as a string.")
    resource_type: Optional[StrictStr] = Field(default=None, description="The base type of this resource.")
    created_at: Optional[datetime] = Field(default=None, description="The time at which this resource was created.")
    resource_subtype: Optional[StrictStr] = Field(default=None, description="The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.")
    text: Optional[StrictStr] = Field(default=None, description="The plain text of the comment to add. Cannot be used with html_text.")
    html_text: Optional[StrictStr] = Field(default=None, description="[Opt In](/docs/inputoutput-options). HTML formatted text for a comment. This will not include the name of the creator.")
    is_pinned: Optional[StrictBool] = Field(default=None, description="*Conditional*. Whether the story should be pinned on the resource.")
    sticker_name: Optional[StrictStr] = Field(default=None, description="The name of the sticker in this story. `null` if there is no sticker.")
    __properties: ClassVar[List[str]] = ["gid", "resource_type", "created_at", "resource_subtype", "text", "html_text", "is_pinned", "sticker_name"]

    @field_validator('sticker_name')
    def sticker_name_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['green_checkmark', 'people_dancing', 'dancing_unicorn', 'heart', 'party_popper', 'people_waving_flags', 'splashing_narwhal', 'trophy', 'yeti_riding_unicorn', 'celebrating_people', 'determined_climbers', 'phoenix_spreading_love']):
            raise ValueError("must be one of enum values ('green_checkmark', 'people_dancing', 'dancing_unicorn', 'heart', 'party_popper', 'people_waving_flags', 'splashing_narwhal', 'trophy', 'yeti_riding_unicorn', 'celebrating_people', 'determined_climbers', 'phoenix_spreading_love')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StoryBase from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "gid",
            "resource_type",
            "created_at",
            "resource_subtype",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StoryBase from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "gid": obj.get("gid"),
            "resource_type": obj.get("resource_type"),
            "created_at": obj.get("created_at"),
            "resource_subtype": obj.get("resource_subtype"),
            "text": obj.get("text"),
            "html_text": obj.get("html_text"),
            "is_pinned": obj.get("is_pinned"),
            "sticker_name": obj.get("sticker_name")
        })
        return _obj


