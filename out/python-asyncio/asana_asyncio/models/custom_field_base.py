# coding: utf-8

"""
    Asana

    This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from pydantic import Field
from asana_asyncio.models.custom_field_compact_all_of_date_value import CustomFieldCompactAllOfDateValue
from asana_asyncio.models.custom_field_compact_all_of_enum_value import CustomFieldCompactAllOfEnumValue
from asana_asyncio.models.enum_option import EnumOption
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CustomFieldBase(BaseModel):
    """
    CustomFieldBase
    """ # noqa: E501
    gid: Optional[StrictStr] = Field(default=None, description="Globally unique identifier of the resource, as a string.")
    resource_type: Optional[StrictStr] = Field(default=None, description="The base type of this resource.")
    name: Optional[StrictStr] = Field(default=None, description="The name of the custom field.")
    resource_subtype: Optional[StrictStr] = Field(default=None, description="The type of the custom field. Must be one of the given values. ")
    type: Optional[StrictStr] = Field(default=None, description="*Deprecated: new integrations should prefer the resource_subtype field.* The type of the custom field. Must be one of the given values. ")
    enum_options: Optional[List[EnumOption]] = Field(default=None, description="*Conditional*. Only relevant for custom fields of type `enum`. This array specifies the possible values which an `enum` custom field can adopt. To modify the enum options, refer to [working with enum options](/reference/createenumoptionforcustomfield).")
    enabled: Optional[StrictBool] = Field(default=None, description="*Conditional*. Determines if the custom field is enabled or not.")
    is_formula_field: Optional[StrictBool] = Field(default=None, description="*Conditional*. This flag describes whether a custom field is a formula custom field.")
    date_value: Optional[CustomFieldCompactAllOfDateValue] = None
    enum_value: Optional[CustomFieldCompactAllOfEnumValue] = None
    multi_enum_values: Optional[List[EnumOption]] = Field(default=None, description="*Conditional*. Only relevant for custom fields of type `multi_enum`. This object is the chosen values of a `multi_enum` custom field.")
    number_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="*Conditional*. This number is the value of a `number` custom field.")
    text_value: Optional[StrictStr] = Field(default=None, description="*Conditional*. This string is the value of a `text` custom field.")
    display_value: Optional[StrictStr] = Field(default=None, description="A string representation for the value of the custom field. Integrations that don't require the underlying type should use this field to read values. Using this field will future-proof an app against new custom field types.")
    description: Optional[StrictStr] = Field(default=None, description="[Opt In](/docs/inputoutput-options). The description of the custom field.")
    precision: Optional[StrictInt] = Field(default=None, description="Only relevant for custom fields of type ‘Number’. This field dictates the number of places after the decimal to round to, i.e. 0 is integer values, 1 rounds to the nearest tenth, and so on. Must be between 0 and 6, inclusive. For percentage format, this may be unintuitive, as a value of 0.25 has a precision of 0, while a value of 0.251 has a precision of 1. This is due to 0.25 being displayed as 25%. The identifier format will always have a precision of 0.")
    format: Optional[StrictStr] = Field(default=None, description="The format of this custom field.")
    currency_code: Optional[StrictStr] = Field(default=None, description="ISO 4217 currency code to format this custom field. This will be null if the `format` is not `currency`.")
    custom_label: Optional[StrictStr] = Field(default=None, description="This is the string that appears next to the custom field value. This will be null if the `format` is not `custom`.")
    custom_label_position: Optional[StrictStr] = Field(default=None, description="Only relevant for custom fields with `custom` format. This depicts where to place the custom label. This will be null if the `format` is not `custom`.")
    is_global_to_workspace: Optional[StrictBool] = Field(default=None, description="This flag describes whether this custom field is available to every container in the workspace. Before project-specific custom fields, this field was always true.")
    has_notifications_enabled: Optional[StrictBool] = Field(default=None, description="*Conditional*. This flag describes whether a follower of a task with this field should receive inbox notifications from changes to this field.")
    asana_created_field: Optional[StrictStr] = Field(default=None, description="*Conditional*. A unique identifier to associate this field with the template source of truth.")
    __properties: ClassVar[List[str]] = ["gid", "resource_type", "name", "resource_subtype", "type", "enum_options", "enabled", "is_formula_field", "date_value", "enum_value", "multi_enum_values", "number_value", "text_value", "display_value", "description", "precision", "format", "currency_code", "custom_label", "custom_label_position", "is_global_to_workspace", "has_notifications_enabled", "asana_created_field"]

    @field_validator('resource_subtype')
    def resource_subtype_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('text', 'enum', 'multi_enum', 'number', 'date', 'people'):
            raise ValueError("must be one of enum values ('text', 'enum', 'multi_enum', 'number', 'date', 'people')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('text', 'enum', 'multi_enum', 'number', 'date', 'people'):
            raise ValueError("must be one of enum values ('text', 'enum', 'multi_enum', 'number', 'date', 'people')")
        return value

    @field_validator('format')
    def format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('currency', 'identifier', 'percentage', 'custom', 'duration', 'none'):
            raise ValueError("must be one of enum values ('currency', 'identifier', 'percentage', 'custom', 'duration', 'none')")
        return value

    @field_validator('custom_label_position')
    def custom_label_position_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('prefix', 'suffix', 'null'):
            raise ValueError("must be one of enum values ('prefix', 'suffix', 'null')")
        return value

    @field_validator('asana_created_field')
    def asana_created_field_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('a_v_requirements', 'account_name', 'actionable', 'align_shipping_link', 'align_status', 'allotted_time', 'appointment', 'approval_stage', 'approved', 'article_series', 'board_committee', 'browser', 'campaign_audience', 'campaign_project_status', 'campaign_regions', 'channel_primary', 'client_topic_type', 'complete_by', 'contact', 'contact_email_address', 'content_channels', 'content_channels_needed', 'content_stage', 'content_type', 'contract', 'contract_status', 'cost', 'creation_stage', 'creative_channel', 'creative_needed', 'creative_needs', 'data_sensitivity', 'deal_size', 'delivery_appt', 'delivery_appt_date', 'department', 'department_responsible', 'design_request_needed', 'design_request_type', 'discussion_category', 'do_this_task', 'editorial_content_status', 'editorial_content_tag', 'editorial_content_type', 'effort', 'effort_level', 'est_completion_date', 'estimated_time', 'estimated_value', 'expected_cost', 'external_steps_needed', 'favorite_idea', 'feedback_type', 'financial', 'funding_amount', 'grant_application_process', 'hiring_candidate_status', 'idea_status', 'ids_link', 'ids_patient_link', 'implementation_stage', 'insurance', 'interview_area', 'interview_question_score', 'itero_scan_link', 'job_s_applied_to', 'lab', 'launch_status', 'lead_status', 'localization_language', 'localization_market_team', 'localization_status', 'meeting_minutes', 'meeting_needed', 'minutes', 'mrr', 'must_localize', 'name_of_foundation', 'need_to_follow_up', 'next_appointment', 'next_steps_sales', 'num_people', 'number_of_user_reports', 'office_location', 'onboarding_activity', 'owner', 'participants_needed', 'patient_date_of_birth', 'patient_email', 'patient_phone', 'patient_status', 'phone_number', 'planning_category', 'point_of_contact', 'position', 'post_format', 'prescription', 'priority', 'priority_level', 'product', 'product_stage', 'progress', 'project_size', 'project_status', 'proposed_budget', 'publish_status', 'reason_for_scan', 'referral', 'request_type', 'research_status', 'responsible_department', 'responsible_team', 'risk_assessment_status', 'room_name', 'sales_counterpart', 'sentiment', 'shipping_link', 'social_channels', 'stage', 'status', 'status_design', 'status_of_initiative', 'system_setup', 'task_progress', 'team', 'team_marketing', 'team_responsible', 'time_it_takes_to_complete_tasks', 'timeframe', 'treatment_type', 'type_work_requests_it', 'use_agency', 'user_name', 'vendor_category', 'vendor_type', 'word_count', 'null'):
            raise ValueError("must be one of enum values ('a_v_requirements', 'account_name', 'actionable', 'align_shipping_link', 'align_status', 'allotted_time', 'appointment', 'approval_stage', 'approved', 'article_series', 'board_committee', 'browser', 'campaign_audience', 'campaign_project_status', 'campaign_regions', 'channel_primary', 'client_topic_type', 'complete_by', 'contact', 'contact_email_address', 'content_channels', 'content_channels_needed', 'content_stage', 'content_type', 'contract', 'contract_status', 'cost', 'creation_stage', 'creative_channel', 'creative_needed', 'creative_needs', 'data_sensitivity', 'deal_size', 'delivery_appt', 'delivery_appt_date', 'department', 'department_responsible', 'design_request_needed', 'design_request_type', 'discussion_category', 'do_this_task', 'editorial_content_status', 'editorial_content_tag', 'editorial_content_type', 'effort', 'effort_level', 'est_completion_date', 'estimated_time', 'estimated_value', 'expected_cost', 'external_steps_needed', 'favorite_idea', 'feedback_type', 'financial', 'funding_amount', 'grant_application_process', 'hiring_candidate_status', 'idea_status', 'ids_link', 'ids_patient_link', 'implementation_stage', 'insurance', 'interview_area', 'interview_question_score', 'itero_scan_link', 'job_s_applied_to', 'lab', 'launch_status', 'lead_status', 'localization_language', 'localization_market_team', 'localization_status', 'meeting_minutes', 'meeting_needed', 'minutes', 'mrr', 'must_localize', 'name_of_foundation', 'need_to_follow_up', 'next_appointment', 'next_steps_sales', 'num_people', 'number_of_user_reports', 'office_location', 'onboarding_activity', 'owner', 'participants_needed', 'patient_date_of_birth', 'patient_email', 'patient_phone', 'patient_status', 'phone_number', 'planning_category', 'point_of_contact', 'position', 'post_format', 'prescription', 'priority', 'priority_level', 'product', 'product_stage', 'progress', 'project_size', 'project_status', 'proposed_budget', 'publish_status', 'reason_for_scan', 'referral', 'request_type', 'research_status', 'responsible_department', 'responsible_team', 'risk_assessment_status', 'room_name', 'sales_counterpart', 'sentiment', 'shipping_link', 'social_channels', 'stage', 'status', 'status_design', 'status_of_initiative', 'system_setup', 'task_progress', 'team', 'team_marketing', 'team_responsible', 'time_it_takes_to_complete_tasks', 'timeframe', 'treatment_type', 'type_work_requests_it', 'use_agency', 'user_name', 'vendor_category', 'vendor_type', 'word_count', 'null')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CustomFieldBase from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "gid",
                "resource_type",
                "resource_subtype",
                "type",
                "enabled",
                "display_value",
                "is_global_to_workspace",
                "asana_created_field",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in enum_options (list)
        _items = []
        if self.enum_options:
            for _item in self.enum_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['enum_options'] = _items
        # override the default output from pydantic by calling `to_dict()` of date_value
        if self.date_value:
            _dict['date_value'] = self.date_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of enum_value
        if self.enum_value:
            _dict['enum_value'] = self.enum_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in multi_enum_values (list)
        _items = []
        if self.multi_enum_values:
            for _item in self.multi_enum_values:
                if _item:
                    _items.append(_item.to_dict())
            _dict['multi_enum_values'] = _items
        # set to None if date_value (nullable) is None
        # and model_fields_set contains the field
        if self.date_value is None and "date_value" in self.model_fields_set:
            _dict['date_value'] = None

        # set to None if number_value (nullable) is None
        # and model_fields_set contains the field
        if self.number_value is None and "number_value" in self.model_fields_set:
            _dict['number_value'] = None

        # set to None if text_value (nullable) is None
        # and model_fields_set contains the field
        if self.text_value is None and "text_value" in self.model_fields_set:
            _dict['text_value'] = None

        # set to None if display_value (nullable) is None
        # and model_fields_set contains the field
        if self.display_value is None and "display_value" in self.model_fields_set:
            _dict['display_value'] = None

        # set to None if currency_code (nullable) is None
        # and model_fields_set contains the field
        if self.currency_code is None and "currency_code" in self.model_fields_set:
            _dict['currency_code'] = None

        # set to None if custom_label (nullable) is None
        # and model_fields_set contains the field
        if self.custom_label is None and "custom_label" in self.model_fields_set:
            _dict['custom_label'] = None

        # set to None if custom_label_position (nullable) is None
        # and model_fields_set contains the field
        if self.custom_label_position is None and "custom_label_position" in self.model_fields_set:
            _dict['custom_label_position'] = None

        # set to None if asana_created_field (nullable) is None
        # and model_fields_set contains the field
        if self.asana_created_field is None and "asana_created_field" in self.model_fields_set:
            _dict['asana_created_field'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CustomFieldBase from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "gid": obj.get("gid"),
            "resource_type": obj.get("resource_type"),
            "name": obj.get("name"),
            "resource_subtype": obj.get("resource_subtype"),
            "type": obj.get("type"),
            "enum_options": [EnumOption.from_dict(_item) for _item in obj.get("enum_options")] if obj.get("enum_options") is not None else None,
            "enabled": obj.get("enabled"),
            "is_formula_field": obj.get("is_formula_field"),
            "date_value": CustomFieldCompactAllOfDateValue.from_dict(obj.get("date_value")) if obj.get("date_value") is not None else None,
            "enum_value": CustomFieldCompactAllOfEnumValue.from_dict(obj.get("enum_value")) if obj.get("enum_value") is not None else None,
            "multi_enum_values": [EnumOption.from_dict(_item) for _item in obj.get("multi_enum_values")] if obj.get("multi_enum_values") is not None else None,
            "number_value": obj.get("number_value"),
            "text_value": obj.get("text_value"),
            "display_value": obj.get("display_value"),
            "description": obj.get("description"),
            "precision": obj.get("precision"),
            "format": obj.get("format"),
            "currency_code": obj.get("currency_code"),
            "custom_label": obj.get("custom_label"),
            "custom_label_position": obj.get("custom_label_position"),
            "is_global_to_workspace": obj.get("is_global_to_workspace"),
            "has_notifications_enabled": obj.get("has_notifications_enabled"),
            "asana_created_field": obj.get("asana_created_field")
        })
        return _obj


