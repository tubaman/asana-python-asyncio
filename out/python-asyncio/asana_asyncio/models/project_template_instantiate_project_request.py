# coding: utf-8

"""
    Asana

    This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from asana_asyncio.models.date_variable_request import DateVariableRequest
from asana_asyncio.models.requested_role_request import RequestedRoleRequest
from typing import Optional, Set
from typing_extensions import Self

class ProjectTemplateInstantiateProjectRequest(BaseModel):
    """
    ProjectTemplateInstantiateProjectRequest
    """ # noqa: E501
    name: StrictStr = Field(description="The name of the new project.")
    team: Optional[StrictStr] = Field(default=None, description="*Optional*. Sets the team of the new project. If the project template exists in an _organization_, you may specify a value for `team`. If no value is provided then it defaults to the same team as the project template.")
    public: Optional[StrictBool] = Field(default=None, description="*Deprecated:* new integrations use `privacy_setting` instead.")
    privacy_setting: Optional[StrictStr] = Field(default=None, description="The privacy setting of the project. *Note: Administrators in your organization may restrict the values of `privacy_setting`.*")
    is_strict: Optional[StrictBool] = Field(default=None, description="*Optional*. If set to `true`, the endpoint returns an \"Unprocessable Entity\" error if you fail to provide a calendar date value for any date variable. If set to `false`, a default date is used for each unfulfilled date variable (e.g., the current date is used as the Start Date of a project).")
    requested_dates: Optional[List[DateVariableRequest]] = Field(default=None, description="*Conditional*. Array of mappings of date variables to calendar dates. This property is required in the instantiation request if the project template includes dates (e.g., a start date on a task).")
    requested_roles: Optional[List[RequestedRoleRequest]] = Field(default=None, description="Array of mappings of template roles to user ids")
    __properties: ClassVar[List[str]] = ["name", "team", "public", "privacy_setting", "is_strict", "requested_dates", "requested_roles"]

    @field_validator('privacy_setting')
    def privacy_setting_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['public_to_workspace', 'private_to_team', 'private']):
            raise ValueError("must be one of enum values ('public_to_workspace', 'private_to_team', 'private')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProjectTemplateInstantiateProjectRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in requested_dates (list)
        _items = []
        if self.requested_dates:
            for _item_requested_dates in self.requested_dates:
                if _item_requested_dates:
                    _items.append(_item_requested_dates.to_dict())
            _dict['requested_dates'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in requested_roles (list)
        _items = []
        if self.requested_roles:
            for _item_requested_roles in self.requested_roles:
                if _item_requested_roles:
                    _items.append(_item_requested_roles.to_dict())
            _dict['requested_roles'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProjectTemplateInstantiateProjectRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "team": obj.get("team"),
            "public": obj.get("public"),
            "privacy_setting": obj.get("privacy_setting"),
            "is_strict": obj.get("is_strict"),
            "requested_dates": [DateVariableRequest.from_dict(_item) for _item in obj["requested_dates"]] if obj.get("requested_dates") is not None else None,
            "requested_roles": [RequestedRoleRequest.from_dict(_item) for _item in obj["requested_roles"]] if obj.get("requested_roles") is not None else None
        })
        return _obj


