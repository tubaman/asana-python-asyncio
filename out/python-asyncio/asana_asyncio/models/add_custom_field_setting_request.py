# coding: utf-8

"""
    Asana

    This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from asana_asyncio.models.add_custom_field_setting_request_custom_field import AddCustomFieldSettingRequestCustomField
from typing import Optional, Set
from typing_extensions import Self

class AddCustomFieldSettingRequest(BaseModel):
    """
    AddCustomFieldSettingRequest
    """ # noqa: E501
    custom_field: AddCustomFieldSettingRequestCustomField
    is_important: Optional[StrictBool] = Field(default=None, description="Whether this field should be considered important to this container (for instance, to display in the list view of items in the container).")
    insert_before: Optional[StrictStr] = Field(default=None, description="A gid of a Custom Field Setting on this container, before which the new Custom Field Setting will be added.  `insert_before` and `insert_after` parameters cannot both be specified.")
    insert_after: Optional[StrictStr] = Field(default=None, description="A gid of a Custom Field Setting on this container, after which the new Custom Field Setting will be added.  `insert_before` and `insert_after` parameters cannot both be specified.")
    __properties: ClassVar[List[str]] = ["custom_field", "is_important", "insert_before", "insert_after"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AddCustomFieldSettingRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of custom_field
        if self.custom_field:
            _dict['custom_field'] = self.custom_field.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AddCustomFieldSettingRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "custom_field": AddCustomFieldSettingRequestCustomField.from_dict(obj["custom_field"]) if obj.get("custom_field") is not None else None,
            "is_important": obj.get("is_important"),
            "insert_before": obj.get("insert_before"),
            "insert_after": obj.get("insert_after")
        })
        return _obj


