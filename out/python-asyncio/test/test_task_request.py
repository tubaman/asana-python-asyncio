# coding: utf-8

"""
    Asana

    This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from asana_asyncio.models.task_request import TaskRequest

class TestTaskRequest(unittest.TestCase):
    """TaskRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TaskRequest:
        """Test TaskRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TaskRequest`
        """
        model = TaskRequest()
        if include_optional:
            return TaskRequest(
                gid = '12345',
                resource_type = 'task',
                name = 'Buy catnip',
                resource_subtype = 'default_task',
                created_by = asana_asyncio.models.task_compact_created_by.TaskCompact_created_by(
                    gid = '1111', 
                    resource_type = 'user', ),
                approval_status = 'pending',
                assignee_status = 'upcoming',
                completed = False,
                completed_at = '2012-02-22T02:06:58.147Z',
                completed_by = asana_asyncio.models.user_compact.UserCompact(
                    gid = '12345', 
                    resource_type = 'user', 
                    name = 'Greg Sanchez', ),
                created_at = '2012-02-22T02:06:58.147Z',
                dependencies = [
                    asana_asyncio.models.asana_resource.AsanaResource(
                        gid = '12345', 
                        resource_type = 'task', )
                    ],
                dependents = [
                    asana_asyncio.models.asana_resource.AsanaResource(
                        gid = '12345', 
                        resource_type = 'task', )
                    ],
                due_at = '2019-09-15T02:06:58.147Z',
                due_on = 'Sun Sep 15 00:00:00 UTC 2019',
                external = {"gid":"my_gid","data":"A blob of information"},
                html_notes = '<body>Mittens <em>really</em> likes the stuff from Humboldt.</body>',
                hearted = True,
                hearts = [
                    asana_asyncio.models.like.Like(
                        gid = '12345', 
                        user = asana_asyncio.models.user_compact.UserCompact(
                            gid = '12345', 
                            resource_type = 'user', 
                            name = 'Greg Sanchez', ), )
                    ],
                is_rendered_as_separator = False,
                liked = True,
                likes = [
                    asana_asyncio.models.like.Like(
                        gid = '12345', 
                        user = asana_asyncio.models.user_compact.UserCompact(
                            gid = '12345', 
                            resource_type = 'user', 
                            name = 'Greg Sanchez', ), )
                    ],
                memberships = [
                    asana_asyncio.models.task_base_all_of_memberships.TaskBase_allOf_memberships(
                        project = asana_asyncio.models.project_compact.ProjectCompact(
                            gid = '12345', 
                            resource_type = 'project', 
                            name = 'Stuff to buy', ), 
                        section = asana_asyncio.models.section_compact.SectionCompact(
                            gid = '12345', 
                            resource_type = 'section', 
                            name = 'Next Actions', ), )
                    ],
                modified_at = '2012-02-22T02:06:58.147Z',
                notes = 'Mittens really likes the stuff from Humboldt.',
                num_hearts = 5,
                num_likes = 5,
                num_subtasks = 3,
                start_at = '2019-09-14T02:06:58.147Z',
                start_on = 'Sat Sep 14 00:00:00 UTC 2019',
                actual_time_minutes = 200,
                assignee = '12345',
                assignee_section = '12345',
                custom_fields = {"5678904321":"On Hold","4578152156":"Not Started"},
                followers = ["12345"],
                parent = '12345',
                projects = ["12345"],
                tags = ["12345"],
                workspace = '12345',
                custom_type = '12345',
                custom_type_status_option = '12345'
            )
        else:
            return TaskRequest(
        )
        """

    def testTaskRequest(self):
        """Test TaskRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
